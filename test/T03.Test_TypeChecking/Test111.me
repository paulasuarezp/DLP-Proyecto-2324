class
	prog2;
	
global

	types
		deftuple point as /*estructura
			x: INTEGER;
			y: INTEGER;
		end
		deftuple complex as /*estructura
			i: DOUBLE;
			j: DOUBLE;
		end


	vars
		b : INTEGER;

	create
		inicio;

	feature factorial (i : INTEGER) : INTEGER is /* declaración con valor de retorno INTEGER y parámetro INTEGER
		local
			j, k : INTEGER;
		do
			from
				j:= 1;
				k:= 0;
			until i = 0 loop
				j := j * i;
				k := k + 1;
				i := i - 1;
			end
			return to<DOUBLE>(j); /* Error, debe retornar un expresión de tipo INTEGER
	end /* factorial

	feature otroFactorial (i : INTEGER) : INTEGER is /* declaración con valor de retorno INTEGER y parámetro INTEGER
		local
			j, k : INTEGER;
		do
			from
				j:= 1;
				k:= 0;
			until i = 0 loop
				j := j * i;
				k := k + 1;
				i := i - 1;
			end
			return; /* Error, debe retornar un expresión de tipo INTEGER, no puede estar vacía la expresión
	end /* factorial

	feature inicio is
		local
			k, l : INTEGER;
			c : [3] INTEGER;
			p, q : point;

		do
			k := factorial (3);
			k := factorial (l);
			k := factorial (l > 1); /* No es error, los booleanos se manejan como INTEGER
			k := factorial (c[2]);
			k := factorial (p.x);
	end
end

run inicio();

//* ERRORES
Error en Type Checking: [35:4] La expresión del return debe ser de tipo 'INTEGER', no de tipo 'DOUBLE'.
Error en Type Checking: [50:4] La expresión del return no puede estar vacía en una feature de tipo 'INTEGER'.
*//