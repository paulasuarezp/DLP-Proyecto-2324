
//*
Este ejemplo no hace nada concreto y está puesto a modo de ejemplo de la sitaxis del lenguaje.
Ver especificaciones del lenguaje para tener mas detalles.
*//

class EJEMPLO;
	
	global
		types
			deftuple tuple1 as /*estructura
				a: [7] INTEGER;
				c: CHARACTER;
				d: DOUBLE;
			end
			deftuple tuple2 as /*estructura
				aa: INTEGER;
				bb: [2] INTEGER;
				tt: tuple1;
				ta: [3] tuple1;
				/* aa: DOUBLE;
			end
		vars
			i : INTEGER; /*esto estaría bien
			j, z : INTEGER;
			ai : [2] INTEGER; /*array de una dimensión
			bi : [2][2] INTEGER; /*array de dos dimensiones
			t : tuple1; /*estructura
			cf : DOUBLE;

	create
		inicio; 
		otroInicio; /*Se podrían definir tantos constructores como se desee
		
	feature factorial (i : INTEGER) : INTEGER is /* declaración con valor de retorno INTEGER y parámetro INTEGER
		local
			j, k : INTEGER;
		do
			from
				j:= 1;
				k:= 0;
			until i = 0 loop
				j := j * i;
				k := k + 1;
				i := i - 1;
			end
			return j;
	end /* factorial
	
	feature inicio (ii : INTEGER, ij : INTEGER, ik : INTEGER) is
		local
			i : INTEGER;
			ai : [5] INTEGER;
			t2 : tuple2; /*estructura	
		do
			read(t.a[2]);
			t2.ta[3].a[4]:=8;  
			if ai [1]  and not (t.a[2] = 0) then
				t.a[5] := t.a[7] * 2;
				return;
			else if t.a[4] = 0 then
				t.a[4] := 100;
				else
					t.a[0] := t.a[0] + to<INTEGER>(10.0);
					t.a[1] := -t.a[0];
				end
			end

			/* otroInicio(); /* Error, no puede ser usada antes de du definición
			
			i:= factorial(1);
			factorial(3);
			
			until i = 5 loop
				ai[i] := t.a[5] * i;
				i := i + 1;
			end
			
			i := t2.bb[0];
			i := t2.ta[2].a[4];
	end /* inicio
	
	feature otroInicio is 
		/*local
		do
			print 'H', 'o', 'l', 'a', ' ', 'M', 'u', 'n', 'd', 'o', '!';
			println;
	end /*otroInicio
	
end /*EJEMPLO

run inicio(2, 3, 4+5); /* como solo puede estar activo un inicio sólo llamaría a éste
	/* EJEMPLO.otroInicio(6); /* inicio alternativo: habría que comentar la linea anterior y descomentar esta

/***** NO DEBE GENERAR NINGÚN ERROR *****/