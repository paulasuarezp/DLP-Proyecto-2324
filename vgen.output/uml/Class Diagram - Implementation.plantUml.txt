' Generated with VGen 2.0.0

@startuml

class Position {
    +int getLine()
    +int getColumn()
    +boolean lessThan(Position other)
    +boolean greaterThan(Position other)
}

interface AST {
    +updatePositions(Object... children)
    +updatePositions(Position start, Position end)
    +Object accept(Visitor visitor, Object param)
}

AST *-[#404040,thickness=1]- Position : start >
AST *-[#404040,thickness=1]- Position : end >


interface Sentence {
}
AST <|-[#808080]- Sentence
abstract AbstractSentence
Sentence <|-[#808080]- AbstractSentence
AbstractAST <|-[#808080]- AbstractSentence

interface Expression {
}
AST <|-[#808080]- Expression
abstract AbstractExpression
Expression <|-[#808080]- AbstractExpression
AbstractAST <|-[#808080]- AbstractExpression

interface Type {
}
AST <|-[#808080]- Type
abstract AbstractType
Type <|-[#808080]- AbstractType
AbstractAST <|-[#808080]- AbstractType

interface AST {
}
abstract AbstractAST
AST <|-[#808080]- AbstractAST

class Program {
	+String name
	+List<String> builders
}
AbstractAST <|-[#808080]- Program
Program o-[#404040,thickness=2]- "✱" StructDefinition : types >
Program o-[#404040,thickness=2]- "✱" VarDefinition : vars >
Program o-[#404040,thickness=2]- "✱" FunctionDefinition : features >
Program o-[#404040,thickness=2]-  FunctionCallSent : runCall >

class StructDefinition {
}
AbstractAST <|-[#808080]- StructDefinition
StructDefinition o-[#404040,thickness=2]-  StructType : name >
StructDefinition o-[#404040,thickness=2]- "✱" FieldDefinition : fields >

class FunctionDefinition {
	+String name
}
AbstractAST <|-[#808080]- FunctionDefinition
FunctionDefinition o-[#404040,thickness=2]- "✱" VarDefinition : params >
FunctionDefinition o-[#404040,thickness=2]- "0..1" Type : returnType >
FunctionDefinition o-[#404040,thickness=2]- "✱" VarDefinition : vars >
FunctionDefinition o-[#404040,thickness=2]- "✱" Sentence : sentences >

class FunctionCallSent {
	+String name
}
AbstractSentence <|-[#808080]- FunctionCallSent
FunctionCallSent o-[#404040,thickness=2]- "✱" Expression : args >

class Assignment {
}
AbstractSentence <|-[#808080]- Assignment
Assignment o-[#404040,thickness=2]-  Expression : left >
Assignment o-[#404040,thickness=2]-  Expression : right >

class Loop {
}
AbstractSentence <|-[#808080]- Loop
Loop o-[#404040,thickness=2]- "✱" Assignment : from >
Loop o-[#404040,thickness=2]-  Expression : until >
Loop o-[#404040,thickness=2]- "✱" Sentence : body >

class IfElse {
}
AbstractSentence <|-[#808080]- IfElse
IfElse o-[#404040,thickness=2]-  Expression : condition >
IfElse o-[#404040,thickness=2]- "✱" Sentence : trueBlock >
IfElse o-[#404040,thickness=2]- "✱" Sentence : falseBlock >

class Read {
}
AbstractSentence <|-[#808080]- Read
Read o-[#404040,thickness=2]- "✱" Expression : input >

class Print {
}
AbstractSentence <|-[#808080]- Print
Print o-[#404040,thickness=2]- "✱" Expression : input >

class Println {
}
AbstractSentence <|-[#808080]- Println
Println o-[#404040,thickness=2]- "✱" Expression : input >

class Return {
}
AbstractSentence <|-[#808080]- Return
Return o-[#404040,thickness=2]- "0..1" Expression : value >

class IntConstant {
	+String value
}
AbstractExpression <|-[#808080]- IntConstant

class RealConstant {
	+String value
}
AbstractExpression <|-[#808080]- RealConstant

class CharConstant {
	+String value
}
AbstractExpression <|-[#808080]- CharConstant

class Variable {
	+String name
}
AbstractExpression <|-[#808080]- Variable

class Cast {
}
AbstractExpression <|-[#808080]- Cast
Cast o-[#404040,thickness=2]-  Type : castType >
Cast o-[#404040,thickness=2]-  Expression : value >

class ArithmeticExpr {
	+String operator
}
AbstractExpression <|-[#808080]- ArithmeticExpr
ArithmeticExpr o-[#404040,thickness=2]-  Expression : op1 >
ArithmeticExpr o-[#404040,thickness=2]-  Expression : op2 >

class LogicalExpr {
	+String operator
}
AbstractExpression <|-[#808080]- LogicalExpr
LogicalExpr o-[#404040,thickness=2]-  Expression : op1 >
LogicalExpr o-[#404040,thickness=2]-  Expression : op2 >

class ComparationExpr {
	+String operator
}
AbstractExpression <|-[#808080]- ComparationExpr
ComparationExpr o-[#404040,thickness=2]-  Expression : op1 >
ComparationExpr o-[#404040,thickness=2]-  Expression : op2 >

class MinusExpr {
}
AbstractExpression <|-[#808080]- MinusExpr
MinusExpr o-[#404040,thickness=2]-  Expression : op >

class NotExpr {
}
AbstractExpression <|-[#808080]- NotExpr
NotExpr o-[#404040,thickness=2]-  Expression : op >

class FunctionCallExpr {
	+String name
}
AbstractExpression <|-[#808080]- FunctionCallExpr
FunctionCallExpr o-[#404040,thickness=2]- "✱" Expression : args >

class FieldAccess {
	+String field
}
AbstractExpression <|-[#808080]- FieldAccess
FieldAccess o-[#404040,thickness=2]-  Expression : root >

class ArrayAccess {
}
AbstractExpression <|-[#808080]- ArrayAccess
ArrayAccess o-[#404040,thickness=2]-  Expression : array >
ArrayAccess o-[#404040,thickness=2]-  Expression : index >

class IntType {
}
AbstractType <|-[#808080]- IntType

class DoubleType {
}
AbstractType <|-[#808080]- DoubleType

class CharType {
}
AbstractType <|-[#808080]- CharType

class VoidType {
}
AbstractType <|-[#808080]- VoidType

class StructType {
	+String name
}
AbstractType <|-[#808080]- StructType

class ArrayType {
}
AbstractType <|-[#808080]- ArrayType
ArrayType o-[#404040,thickness=2]-  IntConstant : dimension >
ArrayType o-[#404040,thickness=2]-  Type : tipo >

class FieldDefinition {
	+String name
}
AbstractAST <|-[#808080]- FieldDefinition
FieldDefinition o-[#404040,thickness=2]-  Type : tipo >

class VarDefinition {
	+String name
}
AbstractAST <|-[#808080]- VarDefinition
VarDefinition o-[#404040,thickness=2]-  Type : tipo >

@enduml
