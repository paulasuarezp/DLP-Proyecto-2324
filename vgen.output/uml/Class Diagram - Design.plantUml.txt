' Generated with VGen 2.0.0

@startuml

class Position {
    +int getLine()
    +int getColumn()
    +boolean lessThan(Position other)
    +boolean greaterThan(Position other)
}

interface AST {
    +updatePositions(Object... children)
    +updatePositions(Position start, Position end)
    +Object accept(Visitor visitor, Object param)
}

AST *-[#404040,thickness=1]- Position : start >
AST *-[#404040,thickness=1]- Position : end >


interface Sentence {
}
AST <|-[#808080]- Sentence
Sentence -[#3366cc,thickness=3]-  FunctionDefinition #text:3366cc : owner >

interface Expression {
	..<color:#3366cc> TypeChecking </color>..
	+<color:#3366cc>boolean lvalue</color>
}
AST <|-[#808080]- Expression
Expression -[#3366cc,thickness=3]-  Type #text:3366cc : type >

interface Type {
}
AST <|-[#808080]- Type

interface AST {
}

class Program {
	+String name
}
AST <|-[#808080]- Program
Program o-[#404040,thickness=2]- "✱" StructDefinition : types >
Program o-[#404040,thickness=2]- "✱" VarDefinition : vars >
Program o-[#404040,thickness=2]- "✱" FunctionBuilder : builders >
Program o-[#404040,thickness=2]- "✱" FunctionDefinition : features >
Program o-[#404040,thickness=2]-  RunCall : runCall >

class RunCall {
	+String name
}
AST <|-[#808080]- RunCall
RunCall o-[#404040,thickness=2]- "✱" Expression : args >
RunCall -[#ff6600,thickness=3]-  FunctionDefinition #text:ff6600 : definition >

class StructDefinition {
}
AST <|-[#808080]- StructDefinition
StructDefinition o-[#404040,thickness=2]-  StructType : name >
StructDefinition o-[#404040,thickness=2]- "✱" FieldDefinition : fields >

class FunctionDefinition {
	+String name
	..<color:#ff6600> Identification </color>..
	+<color:#ff6600>boolean isBuilder</color>
	..<color:#3366cc> TypeChecking </color>..
	+<color:#3366cc>boolean hasReturn</color>
}
AST <|-[#808080]- FunctionDefinition
FunctionDefinition o-[#404040,thickness=2]- "✱" VarDefinition : params >
FunctionDefinition o-[#404040,thickness=2]- "0..1" Type : returnType >
FunctionDefinition o-[#404040,thickness=2]- "✱" VarDefinition : vars >
FunctionDefinition o-[#404040,thickness=2]- "✱" Sentence : sentences >

class FieldDefinition {
	+String name
	..<color:#669900> MemoryAllocation </color>..
	+<color:#669900>int address</color>
}
AST <|-[#808080]- FieldDefinition
FieldDefinition o-[#404040,thickness=2]-  Type : tipo >
FieldDefinition -[#ff6600,thickness=3]-  StructType #text:ff6600 : fieldOwner >

class VarDefinition {
	+String name
	..<color:#ff6600> Identification </color>..
	+<color:#ff6600>Scope scope</color>
	..<color:#669900> MemoryAllocation </color>..
	+<color:#669900>int address</color>
}
AST <|-[#808080]- VarDefinition
VarDefinition o-[#404040,thickness=2]-  Type : tipo >

class FunctionBuilder {
	+String name
}
AST <|-[#808080]- FunctionBuilder

class FunctionCallSent {
	+String name
}
Sentence <|-[#808080]- FunctionCallSent
FunctionCallSent o-[#404040,thickness=2]- "✱" Expression : args >
FunctionCallSent -[#ff6600,thickness=3]-  FunctionDefinition #text:ff6600 : definition >

class Assignment {
}
Sentence <|-[#808080]- Assignment
Assignment o-[#404040,thickness=2]-  Expression : left >
Assignment o-[#404040,thickness=2]-  Expression : right >

class Loop {
}
Sentence <|-[#808080]- Loop
Loop o-[#404040,thickness=2]- "✱" Assignment : from >
Loop o-[#404040,thickness=2]-  Expression : until >
Loop o-[#404040,thickness=2]- "✱" Sentence : body >

class IfElse {
}
Sentence <|-[#808080]- IfElse
IfElse o-[#404040,thickness=2]-  Expression : condition >
IfElse o-[#404040,thickness=2]- "✱" Sentence : trueBlock >
IfElse o-[#404040,thickness=2]- "✱" Sentence : falseBlock >

class Read {
}
Sentence <|-[#808080]- Read
Read o-[#404040,thickness=2]- "✱" Expression : input >

class Print {
	+String op
}
Sentence <|-[#808080]- Print
Print o-[#404040,thickness=2]- "✱" Expression : input >

class Return {
}
Sentence <|-[#808080]- Return
Return o-[#404040,thickness=2]- "0..1" Expression : value >

class Switch {
}
Sentence <|-[#808080]- Switch
Switch o-[#404040,thickness=2]-  Expression : value >
Switch o-[#404040,thickness=2]- "✱" SwitchCase : cases >
Switch o-[#404040,thickness=2]- "✱" Sentence : defaultCase >

class SwitchCase {
}
AST <|-[#808080]- SwitchCase
SwitchCase o-[#404040,thickness=2]-  Expression : value >
SwitchCase o-[#404040,thickness=2]- "✱" Sentence : body >

class IntConstant {
	+String value
}
Expression <|-[#808080]- IntConstant

class RealConstant {
	+String value
}
Expression <|-[#808080]- RealConstant

class CharConstant {
	+String value
}
Expression <|-[#808080]- CharConstant

class Variable {
	+String name
}
Expression <|-[#808080]- Variable
Variable -[#ff6600,thickness=3]-  VarDefinition #text:ff6600 : definition >

class CastExpr {
}
Expression <|-[#808080]- CastExpr
CastExpr o-[#404040,thickness=2]-  Type : castType >
CastExpr o-[#404040,thickness=2]-  Expression : value >

class ArithmeticExpr {
	+String operator
}
Expression <|-[#808080]- ArithmeticExpr
ArithmeticExpr o-[#404040,thickness=2]-  Expression : op1 >
ArithmeticExpr o-[#404040,thickness=2]-  Expression : op2 >

class LogicalExpr {
	+String operator
}
Expression <|-[#808080]- LogicalExpr
LogicalExpr o-[#404040,thickness=2]-  Expression : op1 >
LogicalExpr o-[#404040,thickness=2]-  Expression : op2 >

class ComparationExpr {
	+String operator
}
Expression <|-[#808080]- ComparationExpr
ComparationExpr o-[#404040,thickness=2]-  Expression : op1 >
ComparationExpr o-[#404040,thickness=2]-  Expression : op2 >

class MinusExpr {
}
Expression <|-[#808080]- MinusExpr
MinusExpr o-[#404040,thickness=2]-  Expression : op >

class NotExpr {
}
Expression <|-[#808080]- NotExpr
NotExpr o-[#404040,thickness=2]-  Expression : op >

class FunctionCallExpr {
	+String name
}
Expression <|-[#808080]- FunctionCallExpr
FunctionCallExpr o-[#404040,thickness=2]- "✱" Expression : args >
FunctionCallExpr -[#ff6600,thickness=3]-  FunctionDefinition #text:ff6600 : definition >

class FieldAccess {
	+String field
}
Expression <|-[#808080]- FieldAccess
FieldAccess o-[#404040,thickness=2]-  Expression : root >

class ArrayAccess {
}
Expression <|-[#808080]- ArrayAccess
ArrayAccess o-[#404040,thickness=2]-  Expression : array >
ArrayAccess o-[#404040,thickness=2]-  Expression : index >

class IntType {
}
Type <|-[#808080]- IntType

class DoubleType {
}
Type <|-[#808080]- DoubleType

class CharType {
}
Type <|-[#808080]- CharType

class VoidType {
}
Type <|-[#808080]- VoidType

class StructType {
	+String name
}
Type <|-[#808080]- StructType
StructType -[#ff6600,thickness=3]-  StructDefinition #text:ff6600 : definition >

class ArrayType {
}
Type <|-[#808080]- ArrayType
ArrayType o-[#404040,thickness=2]-  IntConstant : dimension >
ArrayType o-[#404040,thickness=2]-  Type : tipo >

@enduml
